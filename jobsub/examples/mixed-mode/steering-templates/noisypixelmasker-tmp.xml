<?xml version="1.0" encoding="us-ascii"?>
<!-- ?xml-stylesheet type="text/xsl" href="http://ilcsoft.desy.de/marlin/marlin.xsl"? -->
<!-- ?xml-stylesheet type="text/xsl" href="marlin.xsl"? -->

<!--
============================================================================================================================
   Steering File generated by Marlin GUI on Wed Jun 12 15:34:39 2013

   WARNING: - Please be aware that comments made in the original steering file were lost.
	    - Processors that are not installed in your Marlin binary lost their parameter's descriptions and types as well.
	    - Extra parameters that aren't categorized as default in a processor lost their description and type.
============================================================================================================================
-->


<marlin xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="http://ilcsoft.desy.de/marlin/marlin.xsd">

  <execute>
    <processor name="AIDA"/>
    <processor name="NoisyPixelMaskerM26"/>
    <processor name="NoisyPixelMaskerAPIX"/>
    <processor name="Save"/>
    <processor name="MyEUTelUtilityPrintEventNumber"/>
  </execute>

  <global>
    <parameter name="LCIOInputFiles">@NativePath@/@FilePrefix@.slcio</parameter>
    <parameter name="BasePath">@BasePath@</parameter>
    <parameter name="HistoInfoFile">@HistoInfoFile@</parameter>
    <parameter name="GearXMLFile">@GearFilePath@/@GearFile@</parameter>
    <parameter name="MaxRecordNumber">@MaxRecordNumber@</parameter>
    <parameter name="SkipNEvents">@SkipNEvents@</parameter>
    <parameter name="SupressCheck" type='bool'>false</parameter>
    <parameter name="Verbosity">@Verbosity@</parameter>
  </global>

  <processor name="AIDA" type="AIDAProcessor">
    <!-- from Marlin package -->
    <!-- Processor that handles AIDA files. Creates on directory per processor.  Processors only need to create and fill the histograms, clouds and tuples. Needs to be the first ActiveProcessor-->
    <!-- compression of output file 0: false >0: true (default) -->
    <parameter name="Compress" type="int">1</parameter>
    <!-- filename without extension-->
    <parameter name="FileName">@HistogramPath@/@FilePrefix@-noisypixelmasker</parameter>
    <!-- type of output file root (default) or xml )-->
    <parameter name="FileType" type="string">root</parameter>
    <!-- verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
    <!--<parameter name="Verbosity" type="string">DEBUG </parameter>-->
  </processor>

  <processor name="NoisyPixelMaskerM26" type="EUTelProcessorNoisyPixelFinder">
    <!-- EUTelProcessorNoisyPixelFinder computes the firing frequency of pixels and applies a cut on this value to mask (NOT remove) hot pixels.-->
    <!-- Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData">zsdata</parameter>
    <!-- The list of sensor IDs that shall be excluded.-->
    <!--<parameter name="ExcludedPlanes" type="IntVec">0</parameter>-->
    <!-- The number of events to be considered for each update cycle-->
    <parameter name="NoOfEvents" type="int">@NoOfEvents@</parameter>
    <!-- The sensorID for the generated collection (one per detector)-->
    <parameter name="SensorIDVec" type="IntVec">@SensorIDVecM26@</parameter>
    <!-- This is the name of the hot pixel collection to be saved into the output slcio file-->
    <parameter name="HotPixelCollectionName" type="string">hotpixel_m26</parameter>
    <!-- This float number [0,1] represents the maximum allowed firing frequency within the selected number of event per cycle-->
    <parameter name="MaxAllowedFiringFreq" type="float">@FiringFreqCutM26@</parameter>
    <!-- This is the name of the LCIO file name with the output hotpixel db (add .slcio)-->
    <parameter name="HotPixelDBFile">@DatabasePath@/@FilePrefix@-hotpixel-db-m26.slcio</parameter>
    <!-- Write mode for HotPixelDB file:  WRITE_APPEND or WRITE_NEW-->
    <!--<parameter name="LCIOWriteMode" type="string">WRITE_NEW </parameter>-->
    <!-- verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
    <!--<parameter name="Verbosity" type="string">DEBUG</parameter>-->
  </processor>

  <processor name="NoisyPixelMaskerAPIX" type="EUTelProcessorNoisyPixelFinder">
    <!-- EUTelProcessorNoisyPixelFinder computes the firing frequency of pixels and applies a cut on this value to mask (NOT remove) hot pixels.-->
    <!-- Input of Zero Suppressed data-->
    <parameter name="ZSDataCollectionName" type="string" lcioInType="TrackerData"> zsdata_apix </parameter>
    <!-- The list of sensor IDs that shall be excluded.-->
    <!--<parameter name="ExcludedPlanes" type="IntVec"> </parameter> -->
    <!-- The number of events to be considered for each update cycle-->
    <parameter name="NoOfEvents" type="int" value="@NoOfEvents@"/>
    <!-- The sensorID for the generated collection (one per detector)-->
    <parameter name="SensorIDVec" type="IntVec" value="@SensorIDVecAPIX@"/>
    <!-- This float number [0,1] represents the maximum allowed firing frequency within the selected number of event per cycle-->
    <parameter name="MaxAllowedFiringFreq" type="float" value="@FiringFreqCutAPIX@"/>
    <!-- This is the name of the hot pixel collection to be saved into the output slcio file-->
    <parameter name="HotPixelCollectionName" type="string" value="hotpixel_apix"/>
    <!-- This is the name of the LCIO file name with the output hotpixel db (add .slcio)-->
    <parameter name="HotPixelDBFile" type="string" value="@DatabasePath@/@FilePrefix@-hotpixel-db-apix.slcio"/>
    <!-- Write mode for HotPixelDB file:  WRITE_APPEND or WRITE_NEW-->
    <!--<parameter name="LCIOWriteMode" type="string" value="WRITE_NEW"/>-->
    <!-- verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
    <!--<parameter name="Verbosity" type="string" value=""/>-->
  </processor>

  <processor name="Save" type="EUTelOutputProcessor">
    <!-- Writes the current event to the specified LCIO outputfile. Eventually it adds a EORE at the of the file if it was missing Needs to be the last ActiveProcessor.-->
    <!-- drops the named collections from the event-->
    <parameter name="DropCollectionNames" type="StringVec">eudrbSetup </parameter>
    <!-- drops all collections of the given type from the event-->
    <!--<parameter name="DropCollectionTypes" type="StringVec"> SimTrackerHit SimCalorimeterHit </parameter>-->
    <!-- write complete objects in subset collections to the file (i.e. ignore subset flag)-->
    <!--<parameter name="FullSubsetCollections" type="StringVec">MCParticlesSkimmed</parameter>-->
    <!-- force keep of the named collections - overrules DropCollectionTypes (and DropCollectionNames)-->
    <!--<parameter name="KeepCollectionNames" type="StringVec">MyPreciousSimTrackerHits</parameter>-->
    <!-- name of output file -->
    <parameter name="LCIOOutputFile">@LcioPath@/@FilePrefix@-noisypixelmasker.slcio</parameter>
    <!-- write mode for output file:  WRITE_APPEND or WRITE_NEW-->
    <parameter name="LCIOWriteMode" type="string">WRITE_NEW</parameter>
    <!-- Set it to true to remove intermediate EORE in merged runs-->
    <parameter name="SkipIntermediateEORE" type="bool">true</parameter>
    <!-- will split output file if size in kB exceeds given value - doesn't work with APPEND and NEW-->
    <!-- parameter name="SplitFileSizekB" type="int">1992294"/-->
    <!-- verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
    <!--<parameter name="Verbosity" type="string">DEBUG</parameter>-->
  </processor>

  <processor name="MyEUTelUtilityPrintEventNumber" type="EUTelUtilityPrintEventNumber">
    <!--EUTelUtilityPrintEventNumber prints event number to screen depending on the verbosity level-->
    <!--Print event number for every n-th event-->
    <parameter name="EveryNEvents" type="int">2500</parameter>
    <!--verbosity level of this processor ("DEBUG0-4,MESSAGE0-4,WARNING0-4,ERROR0-4,SILENT")-->
    <!--<parameter name="Verbosity" type="string">DEBUG</parameter>-->
    <!--print the event timestamp as read from LCIO-->
    <parameter name="printTimestamp" type="bool">true</parameter>
  </processor>

</marlin>
